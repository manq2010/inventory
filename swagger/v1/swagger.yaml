---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/items":
    get:
      summary: List of items
      tags:
      - Items
      parameters: []
      responses:
        '200':
          description: successful
    post:
      summary: Create an Item
      tags:
      - Items
      parameters: []
      responses:
        '201':
          description: Created Item successfully
        '400':
          description: Operation not successful because of missing arguments or broken
            data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: 4-in-1 toilet
                buying_price:
                  type: decimal
                  default: 150.51
                selling_price:
                  type: decimal
                  default: 170.21
                quantity:
                  type: number
                  default: 20
                category:
                  type: string
                  default: Toilets
                images:
                  type: array
                  default:
                  - https://chillersonwheels.co.za/wp-content/uploads/elementor/thumbs/WhatsApp-Image-2021-03-24-at-15.37.25-q1kvizfrdbuc8fb5uqy8g7ctdcji97y4z81i4nl3b0.jpeg
                  - https://chillersonwheels.co.za/wp-content/uploads/elementor/thumbs/CHILLERS-26-1024x728-1-q1kvizfrdbuc8fb5uqy8g7ctdcji97y4z81i4nl3b0.jpeg
              required:
              - name
              - buying_price
              - quantity
              - category
              - images
  "/api/v1/items/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show specific item using {id}
      tags:
      - Items
      responses:
        '200':
          description: successful
        '400':
          description: Car not found
    put:
      summary: update item
      tags:
      - Items
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: 4-in-1 toilet
                buying_price:
                  type: decimal
                  default: 150.51
                selling_price:
                  type: decimal
                  default: 170.21
                quantity:
                  type: number
                  default: 20
                category:
                  type: string
                  default: Toilets
                images:
                  type: array
                  default:
                  - https://chillersonwheels.co.za/wp-content/uploads/elementor/thumbs/WhatsApp-Image-2021-03-24-at-15.37.25-q1kvizfrdbuc8fb5uqy8g7ctdcji97y4z81i4nl3b0.jpeg
                  - https://chillersonwheels.co.za/wp-content/uploads/elementor/thumbs/CHILLERS-26-1024x728-1-q1kvizfrdbuc8fb5uqy8g7ctdcji97y4z81i4nl3b0.jpeg
              required:
              - name
              - buying_price
              - quantity
              - category
              - images
    delete:
      summary: Delete an Item by {id}
      tags:
      - Items
      responses:
        '202':
          description: Deleted Item successfully
        '404':
          description: Item not found
  "/api/v1/orders":
    get:
      summary: list orders
      tags:
      - Orders
      responses:
        '200':
          description: successful
    post:
      summary: create order
      tags:
      - Orders
      responses:
        '200':
          description: successful
  "/api/v1/orders/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show order
      tags:
      - Orders
      responses:
        '200':
          description: successful
    patch:
      summary: update order
      tags:
      - Orders
      responses:
        '200':
          description: successful
    put:
      summary: update order
      tags:
      - Orders
      responses:
        '200':
          description: successful
    delete:
      summary: delete order
      tags:
      - Orders
      responses:
        '200':
          description: successful
  "/api/v1/sales":
    get:
      summary: List of sales
      tags:
      - Sales
      parameters: []
      responses:
        '200':
          description: successful
    post:
      summary: Create a sale
      tags:
      - Sales
      parameters: []
      responses:
        '201':
          description: Created Item successfully
        '400':
          description: Operation not successful because of missing arguments or broken
            data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: toilets to company x
                total_price:
                  type: decimal
                  default: 0
                user_id:
                  type: number
                  default: '1'
              required:
              - name
              - total_price
              - user_id
  "/api/v1/sales/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: Show a sale
      tags:
      - Sales
      responses:
        '200':
          description: successful
    put:
      summary: update sale
      tags:
      - Sales
      responses:
        '200':
          description: successful
    delete:
      summary: delete sale
      tags:
      - Sales
      responses:
        '200':
          description: successful
  "/api/v1/users":
    get:
      summary: List of users
      tags:
      - Users
      responses:
        '200':
          description: successful
  "/api/v1/signup":
    post:
      summary: Create a new user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User created successfully
        '400':
          description: Username already exists / blank username
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: test
              required:
              - name
  "/api/v1/users/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show user
      tags:
      - Users
      responses:
        '200':
          description: successful
        '404':
          description: User with Id not found
    put:
      summary: update user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: test
              required:
              - name
    delete:
      summary: delete user
      tags:
      - Users
      responses:
        '200':
          description: successful
        '404':
          description: User with Id not found
  "/login":
    post:
      summary: Create a session
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: Successfully logged in
        '401':
          description: Invalid email or password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: test
              required:
              - email
              - password
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: Users
  description: Operations related to users
- name: Items
  description: Operations related to items
- name: Sales
  description: Operations related to Sales
- name: Orders
  description: Operations related to Orders
security:
- bearerAuth: []
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
